generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
  url       = "prisma://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiODQ2ZTdmZWMtMTRiMi00NmFlLWJhNmYtZDdiMTg1NGU3YTcwIiwidGVuYW50X2lkIjoiOWQ5MDM4NTAwMTU2YjY0YWU0YWQxZDYwMjhjYzE2ZjkzNmEwOWJhZGVkMWUyMjA1Y2FkMGVjZDkyMTFjOWI5MCIsImludGVybmFsX3NlY3JldCI6ImNhY2E0NjE3LTQ2YjItNGI1ZS1iNDI2LThjOGRhNTQ2NzZhYSJ9.XFKfH9Of3cWBKoJapJ86ekdTEep3mM77vi8o5wt4sK4"
  directUrl = "postgresql://buyppy_db_user:NvFygzwAtfbUcrMqfw9voWaKTM2YENuh@dpg-cr4d1kogph6c73a79ttg-a.ohio-postgres.render.com/buyppy_db"
}

model User {
  id       String @id @default(uuid())
  email    String
  password String
  name     String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Client {
  id        String  @id @default(uuid())
  document  String
  phone     String
  email     String
  name      String
  addressId String  @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id])
  orders    Order[]

  observations String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("clients")
}

model Address {
  id      String  @id @default(uuid())
  street  String
  number  Int
  zipCode String  @map("zip_code")
  client  Client?
  city    String  @default("")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("address")
}

model Coupon {
  id                 String   @id @default(uuid())
  code               String   @unique
  discountPercentage Float    @map("discount_percentage")
  expirationDate     DateTime @map("expiration_date")
  usageLimit         Int      @map("usage_limit")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("coupons")
}

model Product {
  id               String  @id @default(uuid())
  name             String
  code             String  @unique
  cost             Float
  price            Float
  promotionalPrice Float?  @map("promotional_price")
  categoryId       String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  attributes ProductAttribute[]
  orderItems OrderItem[]
  Category   Category?          @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model Attribute {
  id               String             @id @default(uuid())
  key              String             @unique
  createdAt        DateTime           @default(now()) @map("created_at")
  ProductAttribute ProductAttribute[]

  @@map("attributes")
}

model ProductAttribute {
  id          String    @id @default(uuid())
  productId   String    @map("product_id")
  attributeId String    @map("attribute_id")
  value       String
  product     Product   @relation(fields: [productId], references: [id])
  attribute   Attribute @relation(fields: [attributeId], references: [id])

  createdAt    DateTime       @default(now()) @map("created_at")
  ProductStock ProductStock[]
  categoryId   String?

  @@map("product_attributes")
}

model ProductStock {
  id                 String           @id @default(uuid())
  productAttributeId String           @map("product_attribute_id")
  quantity           Int              @default(0)
  productAttribute   ProductAttribute @relation(fields: [productAttributeId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")

  @@map("product_stocks")
}

model Order {
  id       String      @id @default(uuid())
  clientId String?     @map("client_id")
  client   Client?     @relation(fields: [clientId], references: [id])
  status   String?
  total    Float
  items    OrderItem[]

  paymentMethod   String?
  discountPercent Float?

  refundedAt   DateTime? @map("refunded_at")
  refundReason String?   @map("refund_reason")

  canceledAt   DateTime? @map("canceled_at")
  cancelReason String?   @map("cancel_reason")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String  @map("order_id")
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float

  createdAt DateTime @default(now()) @map("created_at")

  @@map("order_items")
}

model Category {
  id        String    @id @default(uuid())
  title     String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  Product   Product[]

  @@map("categories")
}
